# This is a basic workflow to help you get started with Actions

name: New Build Docker Image and Push to AWS ECR

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "dev" branch
  push:
    branches: [ "master" ]
 

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

     
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      # Login to Amazon ECR with Secret Keys from CLI
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: us-east-1        
      # Runs a set of commands using the runners shell   
      - name: App build, test, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: assignment2-webapp
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd clo835_fall2022_assignment1/
          docker build -f Dockerfile -t $ECR_REGISTRY/assignment2-webapp:v0.1 .
          docker push $ECR_REGISTRY/assignment2-webapp:v0.1
          
      - name: MYSQL build, test, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: assignment2-mysql
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd clo835_fall2022_assignment1/
          docker build -f Dockerfile_mysql -t $ECR_REGISTRY/assignment2-mysql:v0.1 .
          docker push $ECR_REGISTRY/assignment2-mysql:v0.1
